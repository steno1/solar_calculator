// Import necessary constants and the base API slice

import { AUTH_URL, USER_URL } from "../constant";

import apiSlice from "./apiSlice";

// Extend the base API slice with new endpoints for user-related operations
export const userApiSlice = apiSlice.injectEndpoints({
  endpoints: (builder) => ({
    // Define a mutation for user login
    login: builder.mutation({
      query: (data) => ({
        url: `${AUTH_URL}/login`, // Endpoint URL for the login mutation
        method: "POST", // HTTP method for the mutation
        body: data, // Data to be sent in the request body
      }),
    }),
    // Define a mutation for user logout
    logout: builder.mutation({
      query: () => ({
        url: `${AUTH_URL}/logout`, // Endpoint URL for the logout mutation
        method: "POST", // HTTP method for the mutation
      }),
    }),
    // Define a mutation for user registration
    registerUser: builder.mutation({
      query: (data) => ({
        url: `${USER_URL}`, // Endpoint URL for the registration mutation
        method: "POST", // HTTP method for the mutation
        body: data, // Data to be sent in the request body
      }),
    }),
    // Define a query for fetching all users
    getAllUsers: builder.query({
      query: () => `${USER_URL}/all`, // Endpoint URL for the query
      providesTags: ["Users"], // Provide caching tags for users
    }),
    // Define a query for fetching user profile details
    getUserProfile: builder.query({
      query: () => ({
        url: `${USER_URL}/profile`, // Endpoint URL for the query
      }),
      providesTags: ["Users"], // Provide caching tags for users
      keepUnusedDataFor: 5, // Keep unused user data for 5 seconds
    }),
    // Define a mutation for updating user profile details
    updateUserProfile: builder.mutation({
      query: (data) => ({
        url: `${USER_URL}/profile`, // Endpoint URL for the mutation
        method: "PUT", // HTTP method for the mutation
        body: data, // Data to be sent in the request body
      }),
    }),
    // Define a mutation for deleting a user
    deleteUser: builder.mutation({
      query: (userId) => ({
        url: `${USER_URL}/${userId}`, // Endpoint URL for the mutation
        method: "DELETE", // HTTP method for the mutation
      }),
    }),
  }),
});

// Export the custom hooks generated by RTK Query for the defined mutations and queries
export const {
  useLoginMutation,
  useLogoutMutation,
  useRegisterUserMutation,
  useGetAllUsersQuery,
  useGetUserProfileQuery,
  useUpdateUserProfileMutation,
  useDeleteUserMutation,
} = userApiSlice;
